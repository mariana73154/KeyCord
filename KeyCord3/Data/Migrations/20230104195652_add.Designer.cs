// <auto-generated />
using System;
using KeyCord3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KeyCord3.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230104195652_add")]
    partial class add
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoriumCliente", b =>
                {
                    b.Property<int>("IdCat")
                        .HasColumnType("int");

                    b.Property<int>("IdCli")
                        .HasColumnType("int");

                    b.HasKey("IdCat", "IdCli");

                    b.HasIndex("IdCli");

                    b.ToTable("CategoriumCliente");
                });

            modelBuilder.Entity("KeyCord3.Models.Admini", b =>
                {
                    b.Property<int>("IdAdmin")
                        .HasColumnType("int")
                        .HasColumnName("id_admin");

                    b.Property<int>("IdCriador")
                        .HasColumnType("int")
                        .HasColumnName("id_criador");

                    b.HasKey("IdAdmin");

                    b.HasIndex("IdCriador");

                    b.ToTable("Admini");
                });

            modelBuilder.Entity("KeyCord3.Models.Categorium", b =>
                {
                    b.Property<int>("IdCat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_cat");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCat"));

                    b.Property<string>("DescCat")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("desc_cat");

                    b.Property<string>("NomeCat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nome_cat");

                    b.HasKey("IdCat");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("KeyCord3.Models.Cliente", b =>
                {
                    b.Property<int>("IdCli")
                        .HasColumnType("int")
                        .HasColumnName("id_cli");

                    b.Property<bool>("EstadoCli")
                        .HasColumnType("bit")
                        .HasColumnName("estado_cli");

                    b.Property<string>("MoradaCli")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("morada_cli");

                    b.Property<string>("NomeCli")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nome_cli");

                    b.HasKey("IdCli");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("KeyCord3.Models.Compra", b =>
                {
                    b.Property<int>("IdJogo")
                        .HasColumnType("int")
                        .HasColumnName("id_jogo");

                    b.Property<int>("IdCli")
                        .HasColumnType("int")
                        .HasColumnName("id_cli");

                    b.Property<DateTime>("DataCompra")
                        .HasColumnType("datetime")
                        .HasColumnName("data_compra");

                    b.Property<int>("PrecoCompra")
                        .HasColumnType("int")
                        .HasColumnName("preco_compra");

                    b.HasKey("IdJogo", "IdCli");

                    b.HasIndex("IdCli");

                    b.ToTable("Compra");
                });

            modelBuilder.Entity("KeyCord3.Models.Funcionario", b =>
                {
                    b.Property<int>("IdFunc")
                        .HasColumnType("int")
                        .HasColumnName("id_func");

                    b.Property<int>("IdAdd")
                        .HasColumnType("int")
                        .HasColumnName("id_add");

                    b.Property<string>("NomeFunc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nome_Func");

                    b.Property<string>("PhoneFunc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone_Func");

                    b.HasKey("IdFunc");

                    b.HasIndex("IdAdd")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneFunc" }, "UQ__Funciona__F7C545202352A5F1")
                        .IsUnique();

                    b.ToTable("Funcionario");
                });

            modelBuilder.Entity("KeyCord3.Models.Jogo", b =>
                {
                    b.Property<int>("IdJogo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_jogo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdJogo"));

                    b.Property<int>("AnoPublic")
                        .HasColumnType("int")
                        .HasColumnName("ano_public");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime")
                        .HasColumnName("data_edicao");

                    b.Property<string>("DescJogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("desc_jogo");

                    b.Property<int>("Desconto")
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("desconto");

                    b.Property<string>("FotoJogo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("foto_jogo");

                    b.Property<int>("IdCat")
                        .HasColumnType("int")
                        .HasColumnName("id_cat");

                    b.Property<int>("IdFunc")
                        .HasColumnType("int")
                        .HasColumnName("id_func");

                    b.Property<int>("IdPlat")
                        .HasColumnType("int")
                        .HasColumnName("id_plat");

                    b.Property<int>("IdProd")
                        .HasColumnType("int")
                        .HasColumnName("id_prod");

                    b.Property<string>("NomeJogo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nome_jogo");

                    b.Property<int>("PrecoJogo")
                        .HasColumnType("int")
                        .HasColumnName("preco_jogo");

                    b.HasKey("IdJogo");

                    b.HasIndex("IdCat");

                    b.HasIndex("IdPlat");

                    b.HasIndex("IdProd");

                    b.HasIndex(new[] { "IdFunc" }, "UQ__Jogo__61295648A0143B6C")
                        .IsUnique();

                    b.ToTable("Jogo");
                });

            modelBuilder.Entity("KeyCord3.Models.Plataforma", b =>
                {
                    b.Property<int>("IdPlat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_plat");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlat"));

                    b.Property<string>("DescPlat")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("desc_plat");

                    b.Property<string>("NomePlat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nome_plat");

                    b.HasKey("IdPlat");

                    b.ToTable("Plataforma");
                });

            modelBuilder.Entity("KeyCord3.Models.Produtora", b =>
                {
                    b.Property<int>("IdProd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_prod");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProd"));

                    b.Property<string>("DescProd")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("desc_prod");

                    b.Property<string>("NomeProd")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nome_prod");

                    b.HasKey("IdProd");

                    b.ToTable("Produtora");
                });

            modelBuilder.Entity("KeyCord3.Models.Utilizador", b =>
                {
                    b.Property<int>("IdUt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_ut");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUt"));

                    b.Property<string>("FotoUt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("foto_ut");

                    b.Property<string>("IdAspNet")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("id_AspNet");

                    b.Property<string>("UserUt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_ut");

                    b.HasKey("IdUt");

                    b.HasIndex(new[] { "UserUt" }, "UQ__Utilizad__B9B11AFD7F1EF4A9")
                        .IsUnique();

                    b.ToTable("Utilizador");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CategoriumCliente", b =>
                {
                    b.HasOne("KeyCord3.Models.Categorium", null)
                        .WithMany()
                        .HasForeignKey("IdCat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeyCord3.Models.Cliente", null)
                        .WithMany()
                        .HasForeignKey("IdCli")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KeyCord3.Models.Admini", b =>
                {
                    b.HasOne("KeyCord3.Models.Utilizador", "IdAdminNavigation")
                        .WithOne("Admini")
                        .HasForeignKey("KeyCord3.Models.Admini", "IdAdmin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeyCord3.Models.Admini", "IdCriadorNavigation")
                        .WithMany("InverseIdCriadorNavigation")
                        .HasForeignKey("IdCriador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdAdminNavigation");

                    b.Navigation("IdCriadorNavigation");
                });

            modelBuilder.Entity("KeyCord3.Models.Cliente", b =>
                {
                    b.HasOne("KeyCord3.Models.Utilizador", "IdCliNavigation")
                        .WithOne("Cliente")
                        .HasForeignKey("KeyCord3.Models.Cliente", "IdCli")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdCliNavigation");
                });

            modelBuilder.Entity("KeyCord3.Models.Compra", b =>
                {
                    b.HasOne("KeyCord3.Models.Cliente", "IdCliNavigation")
                        .WithMany("Compras")
                        .HasForeignKey("IdCli")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeyCord3.Models.Jogo", "IdJogoNavigation")
                        .WithMany("Compras")
                        .HasForeignKey("IdJogo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdCliNavigation");

                    b.Navigation("IdJogoNavigation");
                });

            modelBuilder.Entity("KeyCord3.Models.Funcionario", b =>
                {
                    b.HasOne("KeyCord3.Models.Admini", "IdAddNavigation")
                        .WithOne("Funcionario")
                        .HasForeignKey("KeyCord3.Models.Funcionario", "IdAdd")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeyCord3.Models.Utilizador", "IdFuncNavigation")
                        .WithOne("Funcionario")
                        .HasForeignKey("KeyCord3.Models.Funcionario", "IdFunc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdAddNavigation");

                    b.Navigation("IdFuncNavigation");
                });

            modelBuilder.Entity("KeyCord3.Models.Jogo", b =>
                {
                    b.HasOne("KeyCord3.Models.Categorium", "IdCatNavigation")
                        .WithMany("Jogos")
                        .HasForeignKey("IdCat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeyCord3.Models.Funcionario", "IdFuncNavigation")
                        .WithOne("Jogo")
                        .HasForeignKey("KeyCord3.Models.Jogo", "IdFunc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeyCord3.Models.Plataforma", "IdPlatNavigation")
                        .WithMany("Jogos")
                        .HasForeignKey("IdPlat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeyCord3.Models.Produtora", "IdProdNavigation")
                        .WithMany("Jogos")
                        .HasForeignKey("IdProd")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdCatNavigation");

                    b.Navigation("IdFuncNavigation");

                    b.Navigation("IdPlatNavigation");

                    b.Navigation("IdProdNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KeyCord3.Models.Admini", b =>
                {
                    b.Navigation("Funcionario");

                    b.Navigation("InverseIdCriadorNavigation");
                });

            modelBuilder.Entity("KeyCord3.Models.Categorium", b =>
                {
                    b.Navigation("Jogos");
                });

            modelBuilder.Entity("KeyCord3.Models.Cliente", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("KeyCord3.Models.Funcionario", b =>
                {
                    b.Navigation("Jogo");
                });

            modelBuilder.Entity("KeyCord3.Models.Jogo", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("KeyCord3.Models.Plataforma", b =>
                {
                    b.Navigation("Jogos");
                });

            modelBuilder.Entity("KeyCord3.Models.Produtora", b =>
                {
                    b.Navigation("Jogos");
                });

            modelBuilder.Entity("KeyCord3.Models.Utilizador", b =>
                {
                    b.Navigation("Admini");

                    b.Navigation("Cliente");

                    b.Navigation("Funcionario");
                });
#pragma warning restore 612, 618
        }
    }
}
